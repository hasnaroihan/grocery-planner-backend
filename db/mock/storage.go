// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hasnaroihan/grocery-planner/db/sqlc (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package dbmock -destination db/mock/storage.go github.com/hasnaroihan/grocery-planner/db/sqlc Storage
//

// Package dbmock is a generated GoMock package.
package dbmock

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	db "github.com/hasnaroihan/grocery-planner/db/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateIngredient mocks base method.
func (m *MockStorage) CreateIngredient(arg0 context.Context, arg1 db.CreateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredient indicates an expected call of CreateIngredient.
func (mr *MockStorageMockRecorder) CreateIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredient", reflect.TypeOf((*MockStorage)(nil).CreateIngredient), arg0, arg1)
}

// CreateRecipe mocks base method.
func (m *MockStorage) CreateRecipe(arg0 context.Context, arg1 db.CreateRecipeParams) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *MockStorageMockRecorder) CreateRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockStorage)(nil).CreateRecipe), arg0, arg1)
}

// CreateRecipeIngredient mocks base method.
func (m *MockStorage) CreateRecipeIngredient(arg0 context.Context, arg1 db.CreateRecipeIngredientParams) (db.RecipesIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipeIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.RecipesIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipeIngredient indicates an expected call of CreateRecipeIngredient.
func (mr *MockStorageMockRecorder) CreateRecipeIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipeIngredient", reflect.TypeOf((*MockStorage)(nil).CreateRecipeIngredient), arg0, arg1)
}

// CreateSchedule mocks base method.
func (m *MockStorage) CreateSchedule(arg0 context.Context, arg1 uuid.NullUUID) (db.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", arg0, arg1)
	ret0, _ := ret[0].(db.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockStorageMockRecorder) CreateSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockStorage)(nil).CreateSchedule), arg0, arg1)
}

// CreateScheduleRecipe mocks base method.
func (m *MockStorage) CreateScheduleRecipe(arg0 context.Context, arg1 db.CreateScheduleRecipeParams) (db.SchedulesRecipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScheduleRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.SchedulesRecipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScheduleRecipe indicates an expected call of CreateScheduleRecipe.
func (mr *MockStorageMockRecorder) CreateScheduleRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScheduleRecipe", reflect.TypeOf((*MockStorage)(nil).CreateScheduleRecipe), arg0, arg1)
}

// CreateUnit mocks base method.
func (m *MockStorage) CreateUnit(arg0 context.Context, arg1 string) (db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnit", arg0, arg1)
	ret0, _ := ret[0].(db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnit indicates an expected call of CreateUnit.
func (mr *MockStorageMockRecorder) CreateUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnit", reflect.TypeOf((*MockStorage)(nil).CreateUnit), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), arg0, arg1)
}

// DeleteIngredient mocks base method.
func (m *MockStorage) DeleteIngredient(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockStorageMockRecorder) DeleteIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockStorage)(nil).DeleteIngredient), arg0, arg1)
}

// DeleteRecipe mocks base method.
func (m *MockStorage) DeleteRecipe(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockStorageMockRecorder) DeleteRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockStorage)(nil).DeleteRecipe), arg0, arg1)
}

// DeleteRecipeIngredient mocks base method.
func (m *MockStorage) DeleteRecipeIngredient(arg0 context.Context, arg1 db.DeleteRecipeIngredientParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeIngredient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipeIngredient indicates an expected call of DeleteRecipeIngredient.
func (mr *MockStorageMockRecorder) DeleteRecipeIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeIngredient", reflect.TypeOf((*MockStorage)(nil).DeleteRecipeIngredient), arg0, arg1)
}

// DeleteSchedule mocks base method.
func (m *MockStorage) DeleteSchedule(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockStorageMockRecorder) DeleteSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockStorage)(nil).DeleteSchedule), arg0, arg1)
}

// DeleteScheduleRecipe mocks base method.
func (m *MockStorage) DeleteScheduleRecipe(arg0 context.Context, arg1 db.DeleteScheduleRecipeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScheduleRecipe", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScheduleRecipe indicates an expected call of DeleteScheduleRecipe.
func (mr *MockStorageMockRecorder) DeleteScheduleRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduleRecipe", reflect.TypeOf((*MockStorage)(nil).DeleteScheduleRecipe), arg0, arg1)
}

// DeleteUnit mocks base method.
func (m *MockStorage) DeleteUnit(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockStorageMockRecorder) DeleteUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockStorage)(nil).DeleteUnit), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStorage) DeleteUser(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStorageMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStorage)(nil).DeleteUser), arg0, arg1)
}

// GenerateGroceries mocks base method.
func (m *MockStorage) GenerateGroceries(arg0 context.Context, arg1 db.GenerateGroceriesParam) (db.GenerateGroceriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateGroceries", arg0, arg1)
	ret0, _ := ret[0].(db.GenerateGroceriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateGroceries indicates an expected call of GenerateGroceries.
func (mr *MockStorageMockRecorder) GenerateGroceries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateGroceries", reflect.TypeOf((*MockStorage)(nil).GenerateGroceries), arg0, arg1)
}

// GetIngredient mocks base method.
func (m *MockStorage) GetIngredient(arg0 context.Context, arg1 int32) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredient indicates an expected call of GetIngredient.
func (mr *MockStorageMockRecorder) GetIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredient", reflect.TypeOf((*MockStorage)(nil).GetIngredient), arg0, arg1)
}

// GetLogin mocks base method.
func (m *MockStorage) GetLogin(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockStorageMockRecorder) GetLogin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockStorage)(nil).GetLogin), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockStorage) GetPermission(arg0 context.Context, arg1 uuid.UUID) (db.GetPermissionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(db.GetPermissionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockStorageMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockStorage)(nil).GetPermission), arg0, arg1)
}

// GetRecipe mocks base method.
func (m *MockStorage) GetRecipe(arg0 context.Context, arg1 int64) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipe indicates an expected call of GetRecipe.
func (mr *MockStorageMockRecorder) GetRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipe", reflect.TypeOf((*MockStorage)(nil).GetRecipe), arg0, arg1)
}

// GetRecipeIngredients mocks base method.
func (m *MockStorage) GetRecipeIngredients(arg0 context.Context, arg1 int64) ([]db.GetRecipeIngredientsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeIngredients", arg0, arg1)
	ret0, _ := ret[0].([]db.GetRecipeIngredientsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeIngredients indicates an expected call of GetRecipeIngredients.
func (mr *MockStorageMockRecorder) GetRecipeIngredients(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeIngredients", reflect.TypeOf((*MockStorage)(nil).GetRecipeIngredients), arg0, arg1)
}

// GetRecipeTx mocks base method.
func (m *MockStorage) GetRecipeTx(arg0 context.Context, arg1 int64) (db.RecipeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeTx", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeTx indicates an expected call of GetRecipeTx.
func (mr *MockStorageMockRecorder) GetRecipeTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeTx", reflect.TypeOf((*MockStorage)(nil).GetRecipeTx), arg0, arg1)
}

// GetSchedule mocks base method.
func (m *MockStorage) GetSchedule(arg0 context.Context, arg1 int64) (db.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", arg0, arg1)
	ret0, _ := ret[0].(db.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockStorageMockRecorder) GetSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockStorage)(nil).GetSchedule), arg0, arg1)
}

// GetScheduleRecipe mocks base method.
func (m *MockStorage) GetScheduleRecipe(arg0 context.Context, arg1 int64) ([]db.GetScheduleRecipeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleRecipe", arg0, arg1)
	ret0, _ := ret[0].([]db.GetScheduleRecipeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleRecipe indicates an expected call of GetScheduleRecipe.
func (mr *MockStorageMockRecorder) GetScheduleRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleRecipe", reflect.TypeOf((*MockStorage)(nil).GetScheduleRecipe), arg0, arg1)
}

// GetUnit mocks base method.
func (m *MockStorage) GetUnit(arg0 context.Context, arg1 int32) (db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnit", arg0, arg1)
	ret0, _ := ret[0].(db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnit indicates an expected call of GetUnit.
func (mr *MockStorageMockRecorder) GetUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnit", reflect.TypeOf((*MockStorage)(nil).GetUnit), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), arg0, arg1)
}

// ListGroceries mocks base method.
func (m *MockStorage) ListGroceries(arg0 context.Context, arg1 int64) ([]db.ListGroceriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroceries", arg0, arg1)
	ret0, _ := ret[0].([]db.ListGroceriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGroceries indicates an expected call of ListGroceries.
func (mr *MockStorageMockRecorder) ListGroceries(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroceries", reflect.TypeOf((*MockStorage)(nil).ListGroceries), arg0, arg1)
}

// ListIngredients mocks base method.
func (m *MockStorage) ListIngredients(arg0 context.Context) ([]db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredients", arg0)
	ret0, _ := ret[0].([]db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredients indicates an expected call of ListIngredients.
func (mr *MockStorageMockRecorder) ListIngredients(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredients", reflect.TypeOf((*MockStorage)(nil).ListIngredients), arg0)
}

// ListRecipes mocks base method.
func (m *MockStorage) ListRecipes(arg0 context.Context, arg1 db.ListRecipesParams) ([]db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipes", arg0, arg1)
	ret0, _ := ret[0].([]db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipes indicates an expected call of ListRecipes.
func (mr *MockStorageMockRecorder) ListRecipes(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipes", reflect.TypeOf((*MockStorage)(nil).ListRecipes), arg0, arg1)
}

// ListRecipesUser mocks base method.
func (m *MockStorage) ListRecipesUser(arg0 context.Context, arg1 db.ListRecipesUserParams) ([]db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecipesUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecipesUser indicates an expected call of ListRecipesUser.
func (mr *MockStorageMockRecorder) ListRecipesUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecipesUser", reflect.TypeOf((*MockStorage)(nil).ListRecipesUser), arg0, arg1)
}

// ListSchedules mocks base method.
func (m *MockStorage) ListSchedules(arg0 context.Context, arg1 db.ListSchedulesParams) ([]db.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedules", arg0, arg1)
	ret0, _ := ret[0].([]db.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedules indicates an expected call of ListSchedules.
func (mr *MockStorageMockRecorder) ListSchedules(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedules", reflect.TypeOf((*MockStorage)(nil).ListSchedules), arg0, arg1)
}

// ListSchedulesUser mocks base method.
func (m *MockStorage) ListSchedulesUser(arg0 context.Context, arg1 db.ListSchedulesUserParams) ([]db.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulesUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedulesUser indicates an expected call of ListSchedulesUser.
func (mr *MockStorageMockRecorder) ListSchedulesUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulesUser", reflect.TypeOf((*MockStorage)(nil).ListSchedulesUser), arg0, arg1)
}

// ListUnits mocks base method.
func (m *MockStorage) ListUnits(arg0 context.Context) ([]db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnits", arg0)
	ret0, _ := ret[0].([]db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnits indicates an expected call of ListUnits.
func (mr *MockStorageMockRecorder) ListUnits(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnits", reflect.TypeOf((*MockStorage)(nil).ListUnits), arg0)
}

// ListUsers mocks base method.
func (m *MockStorage) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStorageMockRecorder) ListUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStorage)(nil).ListUsers), arg0, arg1)
}

// NewRecipeTx mocks base method.
func (m *MockStorage) NewRecipeTx(arg0 context.Context, arg1 db.NewRecipeParams) (db.RecipeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRecipeTx", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRecipeTx indicates an expected call of NewRecipeTx.
func (mr *MockStorageMockRecorder) NewRecipeTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRecipeTx", reflect.TypeOf((*MockStorage)(nil).NewRecipeTx), arg0, arg1)
}

// SearchIngredientName mocks base method.
func (m *MockStorage) SearchIngredientName(arg0 context.Context, arg1 string) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIngredientName", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIngredientName indicates an expected call of SearchIngredientName.
func (mr *MockStorageMockRecorder) SearchIngredientName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIngredientName", reflect.TypeOf((*MockStorage)(nil).SearchIngredientName), arg0, arg1)
}

// SearchIngredients mocks base method.
func (m *MockStorage) SearchIngredients(arg0 context.Context, arg1 string) ([]db.SearchIngredientsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIngredients", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchIngredientsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIngredients indicates an expected call of SearchIngredients.
func (mr *MockStorageMockRecorder) SearchIngredients(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIngredients", reflect.TypeOf((*MockStorage)(nil).SearchIngredients), arg0, arg1)
}

// SearchRecipe mocks base method.
func (m *MockStorage) SearchRecipe(arg0 context.Context, arg1 db.SearchRecipeParams) ([]db.SearchRecipeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRecipe", arg0, arg1)
	ret0, _ := ret[0].([]db.SearchRecipeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRecipe indicates an expected call of SearchRecipe.
func (mr *MockStorageMockRecorder) SearchRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRecipe", reflect.TypeOf((*MockStorage)(nil).SearchRecipe), arg0, arg1)
}

// UpdateIngredient mocks base method.
func (m *MockStorage) UpdateIngredient(arg0 context.Context, arg1 db.UpdateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockStorageMockRecorder) UpdateIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockStorage)(nil).UpdateIngredient), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockStorage) UpdatePassword(arg0 context.Context, arg1 db.UpdatePasswordParams) (db.UpdatePasswordRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(db.UpdatePasswordRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockStorageMockRecorder) UpdatePassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockStorage)(nil).UpdatePassword), arg0, arg1)
}

// UpdateRecipe mocks base method.
func (m *MockStorage) UpdateRecipe(arg0 context.Context, arg1 db.UpdateRecipeParams) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockStorageMockRecorder) UpdateRecipe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockStorage)(nil).UpdateRecipe), arg0, arg1)
}

// UpdateRecipeIngredient mocks base method.
func (m *MockStorage) UpdateRecipeIngredient(arg0 context.Context, arg1 db.UpdateRecipeIngredientParams) (db.RecipesIngredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.RecipesIngredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeIngredient indicates an expected call of UpdateRecipeIngredient.
func (mr *MockStorageMockRecorder) UpdateRecipeIngredient(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeIngredient", reflect.TypeOf((*MockStorage)(nil).UpdateRecipeIngredient), arg0, arg1)
}

// UpdateRecipeTx mocks base method.
func (m *MockStorage) UpdateRecipeTx(arg0 context.Context, arg1 db.TxUpdateRecipeParams) (db.RecipeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeTx", arg0, arg1)
	ret0, _ := ret[0].(db.RecipeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeTx indicates an expected call of UpdateRecipeTx.
func (mr *MockStorageMockRecorder) UpdateRecipeTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeTx", reflect.TypeOf((*MockStorage)(nil).UpdateRecipeTx), arg0, arg1)
}

// UpdateUnit mocks base method.
func (m *MockStorage) UpdateUnit(arg0 context.Context, arg1 db.UpdateUnitParams) (db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnit", arg0, arg1)
	ret0, _ := ret[0].(db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUnit indicates an expected call of UpdateUnit.
func (mr *MockStorageMockRecorder) UpdateUnit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnit", reflect.TypeOf((*MockStorage)(nil).UpdateUnit), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStorage) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStorageMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStorage)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerified mocks base method.
func (m *MockStorage) UpdateVerified(arg0 context.Context, arg1 db.UpdateVerifiedParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerified", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerified indicates an expected call of UpdateVerified.
func (mr *MockStorageMockRecorder) UpdateVerified(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerified", reflect.TypeOf((*MockStorage)(nil).UpdateVerified), arg0, arg1)
}
